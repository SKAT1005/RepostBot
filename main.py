import asyncio
import datetime
import os
import threading
import time
import time as tm
from asgiref.sync import sync_to_async
import django
import telethon
import random
from django.utils import timezone
from telethon import events
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.tl.functions.channels import JoinChannelRequest
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR, CRITICAL)
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),  # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª bot.log
        logging.StreamHandler()  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'RepostBot.settings')

django.setup()

from app.models import Tasks, Messages, SendMessageTask, GlobalNumber, Channel

client = telethon.TelegramClient('User', api_id=21546643, api_hash='54194901b3ff3a879cb371f6293a6422',
                                 system_version="4.16.30-vxCUSTOM")


async def add_channel(to_channel):
    for channel_id in to_channel.split(','):
        try:
            channel = await sync_to_async(Channel.objects.get_or_create)(channel_id=channel_id)
            last_id = list(await client.get_messages(int(channel_id), 1))
            channel, _ = channel
            if last_id:
                last_id = last_id[0].id
                channel.last_message_id = last_id
                await sync_to_async(channel.save)(update_fields=['last_message_id'])
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")


async def create_task(message):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    try:
        tasks = message.text.split('\n')
        first = tasks[0].split()
        if first[0].lower() == 'add':
            n = ' '.join(first[1:]).split('"')
            if len(n) >= 2:
                description = n[1]
            else:
                description = None
            start_date, end_date = n[0].split('-')
            end_date = end_date[:-1]
            if start_date == '0':
                start_date = timezone.now()
            else:
                start_date = datetime.datetime.strptime(start_date, "%d.%m.%Y %H:%M")
            if end_date == '0':
                end_date = None
            else:
                end_date = datetime.datetime.strptime(end_date, "%d.%m.%Y %H:%M")
            global_task_id = await sync_to_async(GlobalNumber.objects.create)(
                description=description,
                start_date=start_date,
                end_date=end_date
            )
            await message.reply(f'‚úÖ –ó–∞–¥–∞—á–∞ {global_task_id.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞')
            for task in tasks[1:]:
                task_list = task.split('"')[0].split()
                task_type = task_list[0].lower()
                if task_type == 'r':
                    try:
                        from_channel = task_list[1]
                        to_channel = ','.join(task_list[2:])
                        await add_channel(from_channel)
                        await sync_to_async(Tasks.objects.create)(
                            type=task_type,
                            global_task_id=global_task_id,
                            to_channel=to_channel,
                            from_channel=from_channel,
                        )

                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ 'repost': {e}")
                        await message.reply(f'–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:\n {task}')
                elif task_type == 'rr':
                    try:
                        from_channel = task_list[1]
                        to_channel = ','.join(task_list[2:-1])
                        chance = task_list[-1]
                        await add_channel(from_channel)
                        await sync_to_async(Tasks.objects.create)(
                            type=task_type,
                            global_task_id=global_task_id,
                            to_channel=to_channel,
                            from_channel=from_channel,
                            chance=chance,
                        )

                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ 'randomrepost': {e}")
                        await message.reply(f'–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:\n {task}')
                elif task_type in ['pr', 'ppr', 'pppr']:
                    try:
                        from_channel = task_list[1]
                        to_channel = ','.join(task_list[2:])
                        await add_channel(from_channel)
                        await sync_to_async(Tasks.objects.create)(
                            type=task_type,
                            global_task_id=global_task_id,
                            to_channel=to_channel,
                            from_channel=from_channel,
                        )

                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ 'previousrepost': {e}")
                        await message.reply(f'–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:\n {task}')
                elif task_type == 'rm':
                    try:
                        from_channel = task_list[1]
                        to_channel = ','.join(task_list[2:-1])
                        minutes = int(task_list[-1])
                        await add_channel(from_channel)
                        await sync_to_async(Tasks.objects.create)(
                            type=task_type,
                            global_task_id=global_task_id,
                            to_channel=to_channel,
                            from_channel=from_channel,
                            time=minutes,
                        )

                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ 'repostminutes': {e}")
                        await message.reply(f'–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:\n {task}')
                elif task_type == 'rrm':
                    try:
                        from_channel = task_list[1]
                        to_channel = ','.join(task_list[2:-2])
                        chance = task_list[-2]
                        minutes = int(task_list[-1])
                        await add_channel(from_channel)
                        await sync_to_async(Tasks.objects.create)(
                            type=task_type,
                            chance=chance,
                            global_task_id=global_task_id,
                            to_channel=to_channel,
                            from_channel=from_channel,
                            time=minutes,
                        )

                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ 'randomrepostminutes': {e}")
                        await message.reply(f'–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:\n {task}')
                elif task_type in ['prrm', 'pprrm', 'ppprrm']:
                    try:
                        from_channel = task_list[1]
                        to_channel = ','.join(task_list[2:-2])
                        chance = task_list[-2]
                        minutes = int(task_list[-1])
                        await add_channel(from_channel)
                        await sync_to_async(Tasks.objects.create)(
                            type=task_type,
                            chance=chance,
                            global_task_id=global_task_id,
                            to_channel=to_channel,
                            from_channel=from_channel,
                            time=minutes,
                        )
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ 'previousrepostrandomrepostminutes': {e}")
                        await message.reply(f'–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:\n {task}')
                else:
                    logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: {task_type}")
                    await message.reply(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å {task} —Ç.–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏')
        elif first[0].lower() == 'list':
            global_task_ids = await sync_to_async(list)(GlobalNumber.objects.all())
            text = ''
            for n, task_id in enumerate(global_task_ids, start=1):
                text += f'<b><i>{task_id.id} | {task_id.description}</b></i>\n' \
                        f'{task_id.start_date_str()} ‚Äî {task_id.end_date_str()}\n'
                for task in await sync_to_async(list)(task_id.tasks.all()):
                    text += f'{task.task_str()}\n'
                text += '\n=========================\n'
            try:
                await message.reply(text, parse_mode='HTML')
            except Exception as e:
                await message.reply('–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç')
        elif first[0].lower() == 'del':
            try:
                id = first[1]
                global_task = await sync_to_async(GlobalNumber.objects.get)(id=id)
                await sync_to_async(global_task.delete)()
                await message.reply(f'üóë –ó–∞–¥–∞—á–∞ –Ω–æ–º–µ—Ä {id} —É–¥–∞–ª–µ–Ω–∞')
            except Exception as e:
                await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏')
        elif first[0].lower() == 'stop':
            try:
                id = first[1]
                task = await sync_to_async(Tasks.objects.get)(id=id)
                await sync_to_async(task.delete)()
                await message.reply(f'üóë –ü–æ–¥–∑–∞–¥–∞—á–∞ –Ω–æ–º–µ—Ä {id} —É–¥–∞–ª–µ–Ω–∞')
            except Exception as e:
                await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏')
        elif first[0].lower() == 'pause':
            try:
                id = first[1]
                task = await sync_to_async(Tasks.objects.get)(id=id)
                task.is_pause = True
                await sync_to_async(task.save)()
                await message.reply(f'‚è∏Ô∏è –ü–æ–¥–∑–∞–¥–∞—á–∞ –Ω–æ–º–µ—Ä {id} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É')
            except Exception as e:
                await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏')
        elif first[0].lower() == 'play':
            try:
                id = first[1]
                task = await sync_to_async(Tasks.objects.get)(id=id)
                task.is_pause = False
                await sync_to_async(task.save)()
                await message.reply(f'‚ñ∂Ô∏èÔ∏è –ü–æ–¥–∑–∞–¥–∞—á–∞ –Ω–æ–º–µ—Ä {id} —Å–Ω—è—Ç–∞ —Å –ø–∞—É–∑—ã')
            except Exception as e:
                await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏')
        elif first[0].startswith('https'):
            try:
                if '/+' in first[0]:
                    link = first[0].split('/+')[1]
                    n = await client(ImportChatInviteRequest(link))
                else:
                    n = await client(JoinChannelRequest(first[0]))
                await message.reply(f'‚úÖ–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞ {n.chats[0].id}')

            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {e}")
                await message.reply('‚ùå–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—Ä—É—á–Ω—É—é')
        elif first[0].lower() == 'help':
            text = ('–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã: \n'
                    '‚Ä¢ <b>help</b> ‚Äî <u>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</u>\n'
                    '‚Ä¢ <b>list</b> ‚Äî <u>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á</u>\n'
                    '‚Ä¢ <b>add</b> <–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ 0>-<–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ 0> <"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"> ‚Äî <u>–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É</u>\n'
                    '‚Ä¢ <b>del</b> <–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏> ‚Äî <u>–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É</u>\n'
                    '‚Ä¢ <b>pause</b> <–ù–æ–º–µ—Ä –ø–æ–¥–∑–∞–¥–∞—á–∏> ‚Äî <u>–ü–∞—É–∑–∞ –¥–ª—è –ø–æ–¥–∑–∞–¥–∞—á–∏</u>\n'
                    '‚Ä¢ <b>play</b> <–ù–æ–º–µ—Ä –ø–æ–¥–∑–∞–¥–∞—á–∏> ‚Äî <u>–°—Ç–∞—Ä—Ç –¥–ª—è –ø–æ–¥–∑–∞–¥–∞—á–∏</u>\n'
                    '‚Ä¢ <b>stop</b> <–ù–æ–º–µ—Ä –ø–æ–¥–∑–∞–¥–∞—á–∏> ‚Äî <u>–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É</u>\n\n'
                    '–†–µ–ø–æ—Å—Ç—ã:\n'
                    '‚Ä¢ <b>r</b> <id –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ><id –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª> ‚Äî <u>–ü—Ä–æ—Å—Ç–æ–π —Ä–µ–ø–æ—Å—Ç</u>\n'
                    '‚Ä¢ <b>rr</b> <id –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ><id –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª> <—à–∞–Ω—Å —Ä–µ–ø–æ—Å—Ç–∞> ‚Äî <u>–†–µ–ø–æ—Å—Ç —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é</u>\n'
                    '‚Ä¢ <b>pr</b> <id –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ><id –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª> ‚Äî <u>–†–µ–ø–æ—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ—Å—Ç–∞</u>\n'
                    '‚Ä¢ <b>ppr</b> <id –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ><id –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª> ‚Äî <u>–†–µ–ø–æ—Å—Ç –ø—Ä–µ–¥-–ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ—Å—Ç–∞</u>\n'
                    '‚Ä¢ <b>pppr</b> <id –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ><id –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª> ‚Äî <u>–†–µ–ø–æ—Å—Ç –ø—Ä–µ–¥-–ø—Ä–µ–¥-–ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ—Å—Ç–∞</u>\n'
                    '‚Ä¢ <b>rm</b> <id –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ><id –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª> <–∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö> ‚Äî <u>–†–µ–ø–æ—Å—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π</u>\n'
                    '‚Ä¢ <b>rrm</b> <id –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ><id –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª> <—à–∞–Ω—Å —Ä–µ–ø–æ—Å—Ç–∞> <–∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö> ‚Äî <u>–†–∞–Ω–¥–æ–º–Ω—ã–π —Ä–µ–ø–æ—Å—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π</u>\n'
                    '‚Ä¢ <b>prrm</b> <id –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ><id –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª> <—à–∞–Ω—Å —Ä–µ–ø–æ—Å—Ç–∞> <–∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö> ‚Äî <u>–†–∞–Ω–¥–æ–º–Ω—ã–π —Ä–µ–ø–æ—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ—Å—Ç–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π</u>\n'
                    '‚Ä¢ <b>pprrm</b> <id –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ><id –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª> <—à–∞–Ω—Å —Ä–µ–ø–æ—Å—Ç–∞> <–∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö> ‚Äî <u>–†–∞–Ω–¥–æ–º–Ω—ã–π —Ä–µ–ø–æ—Å—Ç –ø—Ä–µ–¥-–ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ—Å—Ç–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π</u>\n'
                    '‚Ä¢ <b>ppprrm</b> <id –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ><id –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª> <—à–∞–Ω—Å —Ä–µ–ø–æ—Å—Ç–∞> <–∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö> ‚Äî <u>–†–∞–Ω–¥–æ–º–Ω—ã–π —Ä–µ–ø–æ—Å—Ç –ø—Ä–µ–¥-–ø—Ä–µ–¥-–ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ—Å—Ç–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π</u>')
            await message.reply(text, parse_mode='HTML')
    except Exception as e:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ create_task:")


async def send_message_group(messages, task):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª.
    """
    try:
        message = list(map(int, messages.messages_id.split(',')))
        for to_channel_id in task.to_channel.split(','):
            try:
                while True:
                    try:
                        await client.forward_messages(int(to_channel_id), message, int(messages.channel_id))
                        time.sleep(2)
                        break
                    except telethon.errors.FloodWaitError:
                        time.sleep(3)
            except Exception as e:
                logging.error(f'‚≠ïÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!\n'
                              f'–ü–æ–¥–∑–∞–¥–∞—á–∞ {task.id}')
    except Exception as e:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ send_message_group:")


async def create_or_ad_message(channel_id, message_id, grouped_id):
    """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å.
    """
    try:
        msg = await sync_to_async(list)(
            Messages.objects.filter(channel_id=channel_id, grouped_id=grouped_id, messages_id__contains=message_id))
        if not msg:
            messages = await sync_to_async(list)(Messages.objects.filter(channel_id=channel_id, grouped_id=grouped_id))
            message = messages[0] if messages else None  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
            if message and grouped_id:
                message.messages_id += f',{message_id}'
                await sync_to_async(message.save)(update_fields=['messages_id'])
            else:
                message = await sync_to_async(Messages.objects.create)(channel_id=channel_id, grouped_id=grouped_id,
                                                                       messages_id=f'{message_id}')
            return message
        return msg[0]
    except Exception as e:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ create_or_ad_message:")


async def channel_check(message, album=False):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏.
    """
    try:
        channel_id = message.message.peer_id.channel_id
        tasks = await sync_to_async(list)(Tasks.objects.filter(from_channel__icontains=channel_id))
        grouped_id = message.grouped_id
        message_id = message.id
        while True:
            try:
                channel = await sync_to_async(Channel.objects.get)(channel_id=channel_id)
                if message_id == 1:
                    break
                elif str(message_id - 1) == channel.last_message_id:
                    break
                tm.sleep(0.01)
            except Exception as e:
                logging.error(f'–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª {channel_id}: {e}')
        for task in tasks:
            global_task = await sync_to_async(GlobalNumber.objects.get)(tasks=task)
            now_time = timezone.now() + datetime.timedelta(hours=3)
            if (global_task.start_date and now_time < global_task.start_date) or (
                    global_task.end_date and now_time >= global_task.end_date):
                task.is_active = False
                await sync_to_async(task.save)(update_fields=['is_active'])
            elif (global_task.start_date and timezone.now() >= global_task.start_date) or (
                    global_task.end_date and timezone.now() < global_task.end_date):
                task.is_active = True
                await sync_to_async(task.save)(update_fields=['is_active'])

            if task.is_active and not task.is_pause:
                if task.type == 'r':
                    for to_channel_id in task.to_channel.split(','):
                        try:
                            while True:
                                try:
                                    if album:
                                        await client.forward_messages(int(to_channel_id), album, channel_id)
                                    else:
                                        await client.forward_messages(int(to_channel_id), message_id, channel_id)
                                    break
                                except telethon.errors.FloodWaitError:
                                    tm.sleep(3)
                            if album:
                                for msg in album:
                                    await create_or_ad_message(channel_id=channel_id, message_id=msg.id,
                                                               grouped_id=grouped_id)
                            else:
                                await create_or_ad_message(channel_id=channel_id, message_id=message_id,
                                                           grouped_id=grouped_id)
                        except Exception as e:
                            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ {channel_id}: {e}')
                elif task.type == 'rr':
                    if random.randint(1, 100) <= task.chance:
                        for to_channel_id in task.to_channel.split(','):
                            try:
                                if album:
                                    await client.forward_messages(int(to_channel_id), album, channel_id)
                                else:
                                    await client.forward_messages(int(to_channel_id), message_id, channel_id)
                                break
                            except telethon.errors.FloodWaitError:
                                tm.sleep(3)
                    if album:
                        for msg in album:
                            await create_or_ad_message(channel_id=channel_id, message_id=msg.id,
                                                       grouped_id=grouped_id)
                    else:
                        await create_or_ad_message(channel_id=channel_id, message_id=message_id,
                                                   grouped_id=grouped_id)
                elif task.type == 'pr':
                    if not grouped_id or not await sync_to_async(list)(Messages.objects.filter(grouped_id=grouped_id)):
                        messages = await sync_to_async(list)(
                            Messages.objects.filter(channel_id=channel_id, is_send=False))
                        if messages:
                            for message in messages[::-1]:
                                if str(message_id) not in message.messages_id:
                                    await send_message_group(message, task)
                                    break

                        else:
                            logging.warning("–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (previousrepost)")

                    if album:
                        for msg in album:
                            await create_or_ad_message(channel_id=channel_id, message_id=msg.id,
                                                       grouped_id=grouped_id)
                    else:
                        await create_or_ad_message(channel_id=channel_id, message_id=message_id,
                                                   grouped_id=grouped_id)
                elif task.type == 'ppr':
                    if not grouped_id or not await sync_to_async(list)(Messages.objects.filter(grouped_id=grouped_id)):
                        messages = await sync_to_async(list)(
                            Messages.objects.filter(channel_id=channel_id, is_send=False))
                        if messages:
                            n = 1
                            for message in messages[::-1]:
                                if str(message_id) not in message.messages_id:
                                    if n == 0:
                                        await send_message_group(message, task)
                                        break
                                    n -= 1

                        else:
                            logging.warning("–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (previousrepost)")

                    if album:
                        for msg in album:
                            await create_or_ad_message(channel_id=channel_id, message_id=msg.id,
                                                       grouped_id=grouped_id)
                    else:
                        await create_or_ad_message(channel_id=channel_id, message_id=message_id,
                                                   grouped_id=grouped_id)
                elif task.type == 'pppr':
                    if not grouped_id or not await sync_to_async(list)(Messages.objects.filter(grouped_id=grouped_id)):
                        messages = await sync_to_async(list)(
                            Messages.objects.filter(channel_id=channel_id, is_send=False))
                        if messages:
                            n = 2
                            for message in messages[::-1]:
                                if str(message_id) not in message.messages_id:
                                    if n == 0:
                                        await send_message_group(message, task)
                                        break
                                    n -= 1

                        else:
                            logging.warning("–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (previousrepost)")

                    if album:
                        for msg in album:
                            await create_or_ad_message(channel_id=channel_id, message_id=msg.id,
                                                       grouped_id=grouped_id)
                    else:
                        await create_or_ad_message(channel_id=channel_id, message_id=message_id,
                                                   grouped_id=grouped_id)

                elif task.type == 'rm':
                    if not grouped_id or not await sync_to_async(list)(Messages.objects.filter(grouped_id=grouped_id)):
                        time = timezone.now() + datetime.timedelta(minutes=task.time)
                        if album:
                            for msg in album:
                                need_mesage = await create_or_ad_message(channel_id=channel_id, message_id=msg.id,
                                                           grouped_id=grouped_id)
                        else:
                            need_mesage = await create_or_ad_message(channel_id=channel_id, message_id=message_id,
                                                       grouped_id=grouped_id)
                        await sync_to_async(SendMessageTask.objects.create)(task=task, message=need_mesage, time=time)

                    await create_or_ad_message(channel_id=channel_id, message_id=message_id, grouped_id=grouped_id)
                elif task.type == 'rrm':
                    if random.randint(1, 100) <= task.chance and (
                            not grouped_id or not await sync_to_async(list)(
                        Messages.objects.filter(grouped_id=grouped_id))):
                        time = timezone.now() + datetime.timedelta(minutes=task.time)
                        if album:
                            for msg in album:
                                need_mesage = await create_or_ad_message(channel_id=channel_id, message_id=msg.id,
                                                                         grouped_id=grouped_id)
                        else:
                            need_mesage = await create_or_ad_message(channel_id=channel_id, message_id=message_id,
                                                                     grouped_id=grouped_id)
                        await sync_to_async(SendMessageTask.objects.create)(task=task, message=need_mesage, time=time)

                    else:
                        if album:
                            for msg in album:
                                need_mesage = await create_or_ad_message(channel_id=channel_id, message_id=msg.id,
                                                           grouped_id=grouped_id)
                        else:
                            need_mesage = await create_or_ad_message(channel_id=channel_id, message_id=message_id,
                                                       grouped_id=grouped_id)
                elif task.type == 'prrm':
                    if random.randint(1, 100) <= task.chance:
                        time = timezone.now() + datetime.timedelta(minutes=task.time)
                        if not grouped_id or not await sync_to_async(list)(
                                Messages.objects.filter(grouped_id=grouped_id)):
                            messages = await sync_to_async(list)(
                                Messages.objects.filter(channel_id=channel_id, is_send=False))
                            if messages:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ
                                for message in messages[::-1]:
                                    if str(message_id) not in message.messages_id:
                                        await sync_to_async(SendMessageTask.objects.create)(task=task, message=message, time=time)
                                        break

                            else:
                                logging.warning(
                                    "–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (previousrepostrandomrepostminutes)")
                    if album:
                        for msg in album:
                            await create_or_ad_message(channel_id=channel_id, message_id=msg.id,
                                                       grouped_id=grouped_id)
                    else:
                        await create_or_ad_message(channel_id=channel_id, message_id=message_id,
                                                   grouped_id=grouped_id)
                elif task.type == 'pprrm':
                    if random.randint(1, 100) <= task.chance:
                        time = timezone.now() + datetime.timedelta(minutes=task.time)
                        if not grouped_id or not await sync_to_async(list)(
                                Messages.objects.filter(grouped_id=grouped_id)):
                            messages = await sync_to_async(list)(
                                Messages.objects.filter(channel_id=channel_id, is_send=False))
                            if messages:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ
                                n = 1
                                for message in messages[::-1]:
                                    if str(message_id) not in message.messages_id:
                                        if n == 0:
                                            await sync_to_async(SendMessageTask.objects.create)(task=task, message=message, time=time)
                                            break
                                        n -= 1

                            else:
                                logging.warning(
                                    "–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (previousrepostrandomrepostminutes)")

                    if album:
                        for msg in album:
                            await create_or_ad_message(channel_id=channel_id, message_id=msg.id,
                                                       grouped_id=grouped_id)
                    else:
                        await create_or_ad_message(channel_id=channel_id, message_id=message_id,
                                                   grouped_id=grouped_id)
                elif task.type == 'ppprrm':
                    if random.randint(1, 100) <= task.chance:
                        time = timezone.now() + datetime.timedelta(minutes=task.time)
                        if not grouped_id or not await sync_to_async(list)(
                                Messages.objects.filter(grouped_id=grouped_id)):
                            messages = await sync_to_async(list)(
                                Messages.objects.filter(channel_id=channel_id, is_send=False))
                            if messages:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ
                                for message in messages[::-1]:
                                    n = 2
                                    if str(message_id) not in message.messages_id:
                                        if n == 0:
                                            await sync_to_async(SendMessageTask.objects.create)(task=task, message=message, time=time)
                                            break
                                        n -= 1

                            else:
                                logging.warning(
                                    "–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (previousrepostrandomrepostminutes)")

                    if album:
                        for msg in album:
                            await create_or_ad_message(channel_id=channel_id, message_id=msg.id,
                                                       grouped_id=grouped_id)
                    else:
                        await create_or_ad_message(channel_id=channel_id, message_id=message_id,
                                                   grouped_id=grouped_id)
        channel.last_message_id = message_id
        await sync_to_async(channel.save)(update_fields=['last_message_id'])

    except Exception as e:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ channel_check:")

@client.on(events.Album())
async def handler(event):
    message = event.message
    if message.is_channel and await sync_to_async(list)(
            Tasks.objects.filter(from_channel=message.message.peer_id.channel_id)):
        await channel_check(message, event.messages)

@client.on(events.NewMessage())
async def mk(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    try:
        if message.is_channel and await sync_to_async(list)(
                Tasks.objects.filter(from_channel=message.message.peer_id.channel_id)):
            await channel_check(message)
        elif message.is_private and message.sender_id in [595650100, 1288389919, 8175762996]:
            await create_task(message)
        else:
            logging.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (–Ω–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –Ω–µ –æ—Ç –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)")
    except Exception as e:
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ mk:")


async def send_time_message():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏.
    """
    while True:
        try:
            for message in await sync_to_async(list)(SendMessageTask.objects.all()):
                if message.time <= timezone.now():
                    task = await sync_to_async(Tasks.objects.get)(send_messages_task=message)
                    messages = await sync_to_async(Messages.objects.get)(messages_task=message)
                    await send_message_group(messages, task)
                    await sync_to_async(message.delete)()
            # –ó–∞–º–µ–Ω–µ–Ω–æ time.sleep –Ω–∞ asyncio.sleep
        except Exception as e:
            logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ send_time_message:")
        await asyncio.sleep(1)


async def test():
    for task in await sync_to_async(list)(Tasks.objects.all()):
        await add_channel(task.from_channel)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞.
    """
    await client.start(phone='+79187564306', password='19097007')
    await test()
    task = asyncio.create_task(send_time_message())
    try:
        await client.send_message('skat100500', '12344')
        await client.run_until_disconnected()
    except Exception as e:
        logging.critical(f"–û—à–∏–±–∫–∞ –≤ main: {e}")
    finally:
        task.cancel()
        try:
            await task
        except asyncio.CancelledError:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º CancelledError, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞


if __name__ == '__main__':
    asyncio.get_event_loop().run_until_complete(main())
