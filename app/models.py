from django.db import models

class GlobalNumber(models.Model):
    description = models.TextField(blank=True, null=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏')
    start_date = models.DateTimeField(blank=True, null=True, verbose_name='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞')
    end_date = models.DateTimeField(blank=True, null=True, verbose_name='–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞')

    def start_date_str(self):
        months = [
            "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
            "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
        ]
        dt = self.start_date
        if dt:
            day = dt.day
            month = months[dt.month - 1]  # –ò–Ω–¥–µ–∫—Å—ã –≤ —Å–ø–∏—Å–∫–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
            hour = dt.hour
            minute = dt.minute
            return f"{day} {month} {hour:02}:{minute:02}"
        return ''
    def end_date_str(self):
        months = [
            "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
            "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
        ]
        dt = self.end_date
        if dt:
            day = dt.day
            month = months[dt.month - 1]  # –ò–Ω–¥–µ–∫—Å—ã –≤ —Å–ø–∏—Å–∫–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
            hour = dt.hour
            minute = dt.minute
            return f"{day} {month} {hour:02}:{minute:02}"
        return ''


class Tasks(models.Model):
    global_task_id = models.ForeignKey('GlobalNumber', on_delete=models.CASCADE, related_name='tasks', verbose_name='Id –±–ª–æ–∫–∞ –∑–∞–¥–∞—á–∏')
    type = models.CharField(max_length=128, verbose_name='–¢–∏–ø –ø–µ—Ä–µ—Å—ã–ª–∫–∏')
    to_channel = models.TextField(verbose_name='–í –∫–∞–∫–æ–π –∫–∞–Ω–∞–ª –ø–µ—Ä–µ—Å—ã–ª–∫–∞')
    from_channel = models.CharField(max_length=128, verbose_name='–ò–∑ –∫–∞–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º')
    time = models.IntegerField(default=0, verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π')
    chance = models.IntegerField(default=100, verbose_name='–®–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è')
    is_active = models.BooleanField(default=True, verbose_name='–ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å')
    is_pause = models.BooleanField(default=False, verbose_name='–°—Ç–æ–∏—Ç –ª–∏ –∑–∞–¥–∞—á–∞ –Ω–∞ –ø–∞—É–∑–µ?')


    def task_str(self):
        if not self.is_pause:
            status = 'üü¢'
        else:
            status = 'üî¥'
        return f'{status} {self.id}) {self.from_channel} ‚Üí {self.to_channel}'


class Messages(models.Model):
    channel_id = models.CharField(max_length=128, verbose_name='–ö–∞–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è'
                                  )
    grouped_id = models.IntegerField(blank=True, null=True, verbose_name='–û–±—â–∏–π —Å–ø–∏—Å–æ–∫')
    messages_id = models.TextField(verbose_name='ID —Å–æ–æ–±—â–µ–Ω–∏–π')
    is_send = models.BooleanField(default=False, verbose_name='–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ?')

class SendMessageTask(models.Model):
    message = models.ForeignKey('Messages', on_delete=models.CASCADE, related_name='messages_task', verbose_name='–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫')
    task = models.ForeignKey('Tasks', on_delete=models.CASCADE, related_name='send_messages_task', verbose_name='–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    time = models.DateTimeField(verbose_name='–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏')
